from imports import *

async def go_to_home(callback: CallbackQuery) -> None:
    bilder = InlineKeyboardBuilder()
    bilder.row(InlineKeyboardButton(text="üìï –°–±–æ—Ä–Ω–∏–∫–∏", callback_data="go_to_storage"))
    bilder.row(InlineKeyboardButton(text="üïµÔ∏è‚Äç –ü—Ä–æ—Ñ–∏–ª—å", callback_data="go_to_profile"))
    bilder.row(InlineKeyboardButton(text="üè™ –ú–∞—Ä–∫–µ—Ç", callback_data="go_to_market"))

    await callback.bot.send_photo(callback.message.chat.id, photo=FSInputFile("assets/photos/hello.png"),
                         caption=f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                         reply_markup=bilder.as_markup())
    await callback.answer()


async def go_to_storage(callback=None):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üó∫Ô∏è –°–±–æ—Ä–Ω–∏–∫ –º–µ—Å—Ç", callback_data="go_to_places"))
    builder.row(InlineKeyboardButton(text="üí° –°–±–æ—Ä–Ω–∏–∫ —Ñ–∞–∫—Ç–æ–≤", callback_data="go_to_facts"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_home"))
    await callback.bot.send_photo(callback.message.chat.id, photo=FSInputFile("assets/photos/storage.png"), caption="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–±–æ—Ä–Ω–∏–∫, –∑–¥–µ—Å—å <b>–í—ã</b> –º–æ–∂–µ—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è —Å–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã", reply_markup=builder.as_markup())
    await callback.answer()


async def go_to_profile(callback=None):
    builder = InlineKeyboardBuilder()

    user = CUR.execute(f"SELECT * FROM users WHERE telegram_id={callback.from_user.id}").fetchall()
    builder.row(InlineKeyboardButton(text="üî® –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="go_to_make_request"))
    if len(user) == 0:
        CUR.execute(f"INSERT INTO users(telegram_id) VALUES({callback.from_user.id})")
        CON.commit()
    user = CUR.execute(f"SELECT * FROM users WHERE telegram_id={callback.from_user.id}").fetchall()[0]
    if user[3]:
        builder.row(InlineKeyboardButton(text="‚ùó –í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="go_to_requests"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_home"))
    await callback.message.answer(f"{callback.from_user.full_name} \n –í–∞—à –±–∞–ª–∞–Ω—Å: {user[2]}", reply_markup=builder.as_markup())
    await callback.answer()


async def go_to_market(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="ü™ô –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã", callback_data="go_to_tasks"))
    builder.row(InlineKeyboardButton(text="üõçÔ∏è –ö –æ—Ñ—Ñ–µ—Ä–∞–º", callback_data="go_to_offers"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_home"))
    await callback.message.answer("–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>–º–∞—Ä–∫–µ—Ç</b>, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ  –∑–∞—Ä–æ–±–∞—Ç—ã–≤–∞—Ç—å –±–∞–ª–ª—ã, –ø—Ä–æ—Ö–æ–¥—è —Ä–∞–∑–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –∏ —Ç—Ä–∞—Ç–∏—Ç—å –∏—Ö –Ω–∞ –ø—Ä–æ–º–æ–∫–æ–¥—ã, —Å—Ç–∞—Ç—É—Å—ã –∏ —Ç. –¥.",  reply_markup=builder.as_markup())
    await  callback.answer()


async def go_to_facts(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç", callback_data="go_to_random_fact"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_storage"))
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>—Å–±–æ—Ä–Ω–∏–∫ —Ñ–∞–∫—Ç–æ–≤</b>, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –º–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∏ –∑–∞–±–∞–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –æ –í–æ—Ä–æ–Ω–µ–∂—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"
    await callback.bot.send_photo(callback.message.chat.id, photo=FSInputFile("assets/photos/facts.png"), caption=text, reply_markup=builder.as_markup())
    await callback.answer()


async def go_to_random_fact(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    facts = CUR.execute("SELECT * FROM facts").fetchall()
    fact = random.choice(facts)
    print(random.choice(facts))
    builder.row(InlineKeyboardButton(text="üé≤ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ï—â—ë...", callback_data="go_to_random_fact"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_facts"))
    await callback.bot.send_photo(callback.message.chat.id, photo=FSInputFile(f"assets/photos/facts_photos/{fact[3]}"), caption=f"<b>{fact[1]}</b>\n{fact[2]}", reply_markup=builder.as_markup())
    await callback.answer()


async def go_to_places(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üé≤ –¢–∫–Ω—É—Ç—å –ø–∞–ª—å—Ü–µ–º –≤ –∫–∞—Ä—Ç—É", callback_data="go_to_random_place"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_storage"))
    text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ <b>—Å–±–æ—Ä–Ω–∏–∫ –º–µ—Å—Ç</b>, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö –í–æ—Ä–æ–Ω–µ–∂—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏"
    await callback.bot.send_photo(callback.message.chat.id, photo=FSInputFile("assets/photos/facts.png"), caption=text,
                                  reply_markup=builder.as_markup())
    await callback.answer()


async def go_to_random_place(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    places = CUR.execute("SELECT * FROM places").fetchall()
    place = random.choice(places)
    builder.row(InlineKeyboardButton(text="üé≤ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ï—â—ë...", callback_data="go_to_random_place"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_places"))
    await callback.bot.send_photo(callback.message.chat.id, photo=FSInputFile(f"assets/photos/places_photos/{place[3]}"), caption=f"<b>{place[1]}</b>\n{place[2]}", reply_markup=builder.as_markup())
    await callback.answer()


async def go_to_requests(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    await callback.message.answer("–ú–µ—Å—Ç–∞:")
    places = CUR.execute("SELECT * FROM checking WHERE type='place'")
    for place in places:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="‚òùÔ∏è –ü–µ—Ä–µ–π—Ç–∏", callback_data=f"moderate_content_{place[0]}"))
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"moderate_discard_{place[0]}"))
        await callback.bot.send_photo(chat_id, photo=FSInputFile(f"assets/photos/requests_photos/{place[4]}"), caption=f"<b>{place[2]}</b>\n{place[3]}", reply_markup=builder.as_markup())

    await callback.message.answer("–§–∞–∫—Ç—ã:")
    facts = CUR.execute("SELECT * FROM checking WHERE type='fact'")
    print(facts)
    for fact in facts:
        builder = InlineKeyboardBuilder()
        builder.add(InlineKeyboardButton(text="‚òùÔ∏è –ü–µ—Ä–µ–π—Ç–∏", callback_data=f"moderate_content_{fact[0]}"))
        builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"moderate_discard_{fact[0]}"))
        await callback.bot.send_photo(chat_id, photo=FSInputFile(f"assets/photos/requests_photos/{fact[4]}"),
                                      caption=f"<b>{fact[2]}</b>\n{fact[3]}", reply_markup=builder.as_markup())
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"go_to_profile"))
    await callback.message.answer(text="–í—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã ‚òùÔ∏è", reply_markup=builder.as_markup())
    await callback.answer()

async def go_to_make_request(callback: CallbackQuery):
    User_publish_redact[callback.from_user.id] = ["–ù–ê–ó–í–ê–ù–ò–ï", "–°–û–î–ï–†–ñ–ê–ù–ò–ï", "default.png", "fact"]
    await go_to_redact_user_publish(callback)


async  def go_to_redact_user_publish(callback: CallbackQuery):
    user_redact = User_publish_redact[callback.from_user.id]
    builder = InlineKeyboardBuilder()
    type = {"fact":"—Ñ–∞–∫—Ç", "place":"–º–µ—Å—Ç–æ"}[User_publish_redact[callback.from_user.id][3]]
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="pub_user_change_name"), InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="pub_user_change_body"))
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="pub_user_change_img"), InlineKeyboardButton(text=f"–¢–∏–ø: {type}", callback_data="pub_user_change_type"))
    builder.row(InlineKeyboardButton(text="‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å", callback_data="pub_user_change_publish"), InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="go_to_profile"))
    await callback.bot.send_photo(callback.message.chat.id, photo=FSInputFile(f"assets/photos/requests_photos/{user_redact[2]}"), caption=f"<b>{user_redact[0]}</b>\n{user_redact[1]}", reply_markup=builder.as_markup())
    await callback.answer()


async  def go_to_redact_user_publish_from_message(message: Message):
    user_redact = User_publish_redact[message.from_user.id]
    builder = InlineKeyboardBuilder()
    type = {"fact":"—Ñ–∞–∫—Ç", "place":"–º–µ—Å—Ç–æ"}[User_publish_redact[message.from_user.id][3]]
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="pub_user_change_name"),
                InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ", callback_data="pub_user_change_body"))
    builder.row(InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", callback_data="pub_user_change_img"),
                InlineKeyboardButton(text=f"–¢–∏–ø: {type}", callback_data="pub_user_change_type"))
    builder.row(InlineKeyboardButton(text="‚úÖ –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å", callback_data="pub_user_change_publish"),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="go_to_profile"))
    await message.bot.send_photo(message.chat.id, photo=FSInputFile(f"assets/photos/requests_photos/{user_redact[2]}"), caption=f"<b>{user_redact[0]}</b>\n{user_redact[1]}", reply_markup=builder.as_markup())


async def go_to_tasks(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    tasks = CUR.execute("SELECT * FROM tasks").fetchall()
    balance = CUR.execute(f"SELECT balance FROM users WHERE telegram_id={callback.from_user.id}").fetchall()[0][0]
    for task in tasks:
        users = task[2].split(";")
        if str(callback.from_user.id) not in users:
            builder.row(InlineKeyboardButton(text=f"{task[1]}: {task[3]}ü™ô", callback_data=f"task_{task[0]}"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_market"))
    await callback.message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ:", reply_markup=builder.as_markup())
    await callback.answer()

async def go_to_offers(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑ –≤ –ß–∏—Ç–∞–π–ì–æ—Ä–æ–¥: 1000ü™ô", callback_data="offer_promocode"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_to_market"))
    balance = CUR.execute(f"SELECT balance FROM users WHERE telegram_id={callback.from_user.id}").fetchall()[0][0]
    await callback.message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ—Ñ–µ—Ä-–º–∞—Ä–∫–µ—Ç, —Å–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥—ã –Ω–∞ –ø–æ–∫—É–ø–∫—É —Å—É–≤–µ–Ω–∏—Ä–æ–≤, –æ—Å–æ–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Ç. –¥.\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}", reply_markup=builder.as_markup())
    await callback.answer()



functions = {
    "go_to_home":go_to_home,
    "go_to_storage":go_to_storage,
    "go_to_profile":go_to_profile,
    "go_to_market":go_to_market,
    "go_to_facts":go_to_facts,
    "go_to_random_fact":go_to_random_fact,
    "go_to_places":go_to_places,
    "go_to_random_place":go_to_random_place,
    "go_to_requests":go_to_requests,
    "go_to_make_request":go_to_make_request,
    "go_to_redact_user_publish":go_to_redact_user_publish,
    "go_to_tasks":go_to_tasks,
    "go_to_offers":go_to_offers
}
